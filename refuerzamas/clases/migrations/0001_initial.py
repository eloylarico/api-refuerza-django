# Generated by Django 3.0.10 on 2020-10-05 02:47

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('ciudades', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, help_text='Nombre que se le mostrará al demas de usuarios', max_length=255, null=True)),
                ('tipo_usuario', models.CharField(blank=True, choices=[('ESTUDIANTE', 'Estudiante'), ('DOCENTE', 'Docente'), ('TUTOR', 'Tutor')], help_text='Tipo de usuario que el usuario será[Docente, Estudiante, Tutor], si es un usuario del admin, dejar en blanco', max_length=100, null=True, verbose_name='Tipo de usuario')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='users/avatar', verbose_name='Foto de perfil')),
                ('fecha_nacimiento', models.DateField(blank=True, null=True, verbose_name='Fecha de nacimiento')),
                ('celular', models.CharField(blank=True, max_length=9, null=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Correo electrónico')),
                ('direccion', models.CharField(blank=True, max_length=255, null=True, verbose_name='Dirección')),
                ('observaciones', models.TextField(blank=True, null=True)),
                ('ciudad', models.ForeignKey(blank=True, help_text='Campo que referencia a la ciudad del usuario en la aplicación', null=True, on_delete=django.db.models.deletion.CASCADE, to='ciudades.Ciudad')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Curso',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Docente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('herramientas_videollamada', models.TextField(blank=True, null=True, verbose_name='Herramientas de videollamada')),
                ('entrevista', models.BooleanField(blank=True, null=True)),
                ('confiabilidad', models.CharField(blank=True, choices=[('MUY_BUENO', 'Muy bueno'), ('BUENO', 'Bueno'), ('REGULAR', 'Regular'), ('MALO', 'Malo'), ('MALISIMO', 'Malísimo')], max_length=100, null=True)),
                ('señal', models.CharField(blank=True, choices=[('MUY_BUENO', 'Muy bueno'), ('BUENO', 'Bueno'), ('REGULAR', 'Regular'), ('MALO', 'Malo'), ('MALISIMO', 'Malísimo')], max_length=100, null=True)),
                ('breve_cv', models.TextField(blank=True, null=True)),
                ('curriculum', models.CharField(blank=True, choices=[('MUY_BUENO', 'Muy bueno'), ('BUENO', 'Bueno'), ('REGULAR', 'Regular'), ('MALO', 'Malo'), ('MALISIMO', 'Malísimo')], max_length=100, null=True)),
                ('docencia', models.BooleanField(blank=True, null=True)),
                ('titulo', models.BooleanField(blank=True, null=True)),
                ('filosofia', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Perfil del docente',
                'verbose_name_plural': 'Perfiles de los docentes',
            },
        ),
        migrations.CreateModel(
            name='Estudiante',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Perfil del estudiante',
                'verbose_name_plural': 'Perfiles de los estudiantes',
            },
        ),
        migrations.CreateModel(
            name='Genero',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Género',
                'verbose_name_plural': 'Géneros',
            },
        ),
        migrations.CreateModel(
            name='GradoInstruccion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Grado de instrucción',
                'verbose_name_plural': 'Grados de instrucción',
            },
        ),
        migrations.CreateModel(
            name='Materia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('foto', models.ImageField(null=True, upload_to='clases/cursos/fotos', verbose_name='Ícono del curso')),
            ],
        ),
        migrations.CreateModel(
            name='Nivel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('descripcion', models.TextField(blank=True, null=True, verbose_name='Descripción')),
                ('orden', models.PositiveIntegerField(blank=True, null=True, verbose_name='Órden')),
                ('foto', models.ImageField(blank=True, null=True, upload_to='clases/niveles/iconos', verbose_name='Ícono del nivel')),
            ],
            options={
                'verbose_name': 'Nivel',
                'verbose_name_plural': 'Niveles',
            },
        ),
        migrations.CreateModel(
            name='Tutor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='perfil_tutor', to=settings.AUTH_USER_MODEL, verbose_name='Tutor')),
            ],
            options={
                'verbose_name': 'Perfil del tutor',
                'verbose_name_plural': 'Perfiles de los tutores',
            },
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('precio', models.FloatField(verbose_name='Precio al Estudiante')),
                ('hora_inicio', models.DateTimeField()),
                ('hora_fin', models.DateTimeField()),
                ('estado', models.CharField(choices=[('PENDIENTE', 'Pendiente'), ('ACTIVA', 'Activa'), ('TERMINADA', 'Terminada'), ('REPROGRAMADA', 'Reprogramada'), ('CANCELADA', 'Cancelada'), ('REPORTADA', 'Reportada')], default='PENDIENTE', max_length=100)),
                ('motivo_reporte', models.TextField(blank=True, null=True)),
                ('curso', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservas', to='clases.Curso')),
                ('docente', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='clases', to='clases.Docente')),
                ('estudiante', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='clases.Estudiante', verbose_name='Estudiante')),
            ],
            options={
                'verbose_name': 'Reserva',
                'verbose_name_plural': 'Reservas',
            },
        ),
        migrations.CreateModel(
            name='Institucion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255)),
                ('foto', models.ImageField(null=True, upload_to='usuarios/institucion', verbose_name='Foto de la institucion')),
                ('ciudad', models.ForeignKey(blank=True, help_text='Campo que referencia a la ciudad del doctor en la aplicación', null=True, on_delete=django.db.models.deletion.CASCADE, to='ciudades.Ciudad', verbose_name='Ciudad')),
                ('nivel', models.ForeignKey(blank=True, help_text='Campo que referencia al nivel académico: Escolar, Preparatoria, Universidad', null=True, on_delete=django.db.models.deletion.CASCADE, to='clases.Nivel', verbose_name='Nivel')),
            ],
            options={
                'verbose_name': 'Institución',
                'verbose_name_plural': 'Instituciones',
            },
        ),
        migrations.CreateModel(
            name='HorarioLibreDocente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hora_inicio', models.DateTimeField(verbose_name='Fecha y hora del inicio del horario libre')),
                ('hora_fin', models.DateTimeField(verbose_name='Fecha y hora del fin del horario libre')),
                ('docente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clases.Docente', verbose_name='Horarios Libres del Docente')),
            ],
            options={
                'verbose_name': 'Horario Libre',
                'verbose_name_plural': 'Horarios Libres',
            },
        ),
        migrations.CreateModel(
            name='Grado',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('descripcion', models.TextField(blank=True, null=True, verbose_name='Descripción')),
                ('orden', models.PositiveIntegerField(blank=True, null=True)),
                ('nivel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clases.Nivel')),
            ],
        ),
        migrations.AddField(
            model_name='estudiante',
            name='grado',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='clases.Grado'),
        ),
        migrations.AddField(
            model_name='estudiante',
            name='institucion',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='clases.Institucion'),
        ),
        migrations.AddField(
            model_name='estudiante',
            name='tutor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='clases.Tutor'),
        ),
        migrations.AddField(
            model_name='estudiante',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='perfil_estudiante', to=settings.AUTH_USER_MODEL, verbose_name='Estudiante'),
        ),
        migrations.AddField(
            model_name='docente',
            name='grado_instruccion',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='clases.GradoInstruccion', verbose_name='Grado de instrucción'),
        ),
        migrations.AddField(
            model_name='docente',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='perfil_docente', to=settings.AUTH_USER_MODEL, verbose_name='Docente'),
        ),
        migrations.AddField(
            model_name='curso',
            name='grado',
            field=models.ForeignKey(help_text='Campo que referencia al grado(1° de primaria, 2° de Secundaria, etc) del estudiante', on_delete=django.db.models.deletion.PROTECT, to='clases.Grado'),
        ),
        migrations.AddField(
            model_name='curso',
            name='materia',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='clases.Materia'),
        ),
        migrations.AddField(
            model_name='user',
            name='genero',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clases.Genero', verbose_name='Género'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Clase',
            fields=[
            ],
            options={
                'verbose_name': 'Clase',
                'verbose_name_plural': 'Clases',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('clases.reserva',),
            managers=[
                ('clases', django.db.models.manager.Manager()),
            ],
        ),
    ]
